// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"net/netip"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (
    user_id,
    token_hash,
    expires_at,
    user_agent,
    ip_address
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, token_hash, expires_at, created_at, last_used, is_revoked, user_agent, ip_address
`

type CreateRefreshTokenParams struct {
	UserID    uuid.UUID          `json:"user_id"`
	TokenHash string             `json:"token_hash"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
	UserAgent *string            `json:"user_agent"`
	IpAddress *netip.Addr        `json:"ip_address"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, createRefreshToken,
		arg.UserID,
		arg.TokenHash,
		arg.ExpiresAt,
		arg.UserAgent,
		arg.IpAddress,
	)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.LastUsed,
		&i.IsRevoked,
		&i.UserAgent,
		&i.IpAddress,
	)
	return i, err
}

const deleteExpiredRefreshTokens = `-- name: DeleteExpiredRefreshTokens :exec
DELETE FROM refresh_tokens 
WHERE expires_at < now() OR is_revoked = TRUE
`

func (q *Queries) DeleteExpiredRefreshTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredRefreshTokens)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT id, user_id, token_hash, expires_at, created_at, last_used, is_revoked, user_agent, ip_address FROM refresh_tokens 
WHERE token_hash = $1 
  AND is_revoked = FALSE 
  AND expires_at > now()
`

func (q *Queries) GetRefreshToken(ctx context.Context, tokenHash string) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshToken, tokenHash)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.LastUsed,
		&i.IsRevoked,
		&i.UserAgent,
		&i.IpAddress,
	)
	return i, err
}

const getUserRefreshTokens = `-- name: GetUserRefreshTokens :many
SELECT id, user_id, token_hash, expires_at, created_at, last_used, is_revoked, user_agent, ip_address FROM refresh_tokens 
WHERE user_id = $1 
  AND is_revoked = FALSE 
  AND expires_at > now()
ORDER BY created_at DESC
`

func (q *Queries) GetUserRefreshTokens(ctx context.Context, userID uuid.UUID) ([]RefreshToken, error) {
	rows, err := q.db.Query(ctx, getUserRefreshTokens, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RefreshToken{}
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TokenHash,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.LastUsed,
			&i.IsRevoked,
			&i.UserAgent,
			&i.IpAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeAllUserRefreshTokens = `-- name: RevokeAllUserRefreshTokens :exec
UPDATE refresh_tokens 
SET is_revoked = TRUE
WHERE user_id = $1
`

func (q *Queries) RevokeAllUserRefreshTokens(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, revokeAllUserRefreshTokens, userID)
	return err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens 
SET is_revoked = TRUE
WHERE token_hash = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, tokenHash string) error {
	_, err := q.db.Exec(ctx, revokeRefreshToken, tokenHash)
	return err
}

const updateRefreshTokenLastUsed = `-- name: UpdateRefreshTokenLastUsed :exec
UPDATE refresh_tokens 
SET last_used = now()
WHERE id = $1
`

func (q *Queries) UpdateRefreshTokenLastUsed(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateRefreshTokenLastUsed, id)
	return err
}
