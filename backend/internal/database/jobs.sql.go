// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: jobs.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createJob = `-- name: CreateJob :one
INSERT INTO jobs (
    owner_id,
    image_uri,
    env_vars,
    delay_tolerance_hours
) VALUES (
    $1, $2, $3, $4
) RETURNING id, owner_id, image_uri, env_vars, delay_tolerance_hours, created_at, updated_at
`

type CreateJobParams struct {
	OwnerID             uuid.UUID `json:"owner_id"`
	ImageUri            string    `json:"image_uri"`
	EnvVars             []byte    `json:"env_vars"`
	DelayToleranceHours int32     `json:"delay_tolerance_hours"`
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.db.QueryRow(ctx, createJob,
		arg.OwnerID,
		arg.ImageUri,
		arg.EnvVars,
		arg.DelayToleranceHours,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ImageUri,
		&i.EnvVars,
		&i.DelayToleranceHours,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteJob = `-- name: DeleteJob :exec
DELETE FROM jobs 
WHERE id = $1 AND owner_id = $2
`

type DeleteJobParams struct {
	ID      uuid.UUID `json:"id"`
	OwnerID uuid.UUID `json:"owner_id"`
}

func (q *Queries) DeleteJob(ctx context.Context, arg DeleteJobParams) error {
	_, err := q.db.Exec(ctx, deleteJob, arg.ID, arg.OwnerID)
	return err
}

const getJob = `-- name: GetJob :one
SELECT id, owner_id, image_uri, env_vars, delay_tolerance_hours, created_at, updated_at FROM jobs 
WHERE id = $1 AND owner_id = $2
`

type GetJobParams struct {
	ID      uuid.UUID `json:"id"`
	OwnerID uuid.UUID `json:"owner_id"`
}

func (q *Queries) GetJob(ctx context.Context, arg GetJobParams) (Job, error) {
	row := q.db.QueryRow(ctx, getJob, arg.ID, arg.OwnerID)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ImageUri,
		&i.EnvVars,
		&i.DelayToleranceHours,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getJobCount = `-- name: GetJobCount :one
SELECT COUNT(*) FROM jobs 
WHERE owner_id = $1
`

func (q *Queries) GetJobCount(ctx context.Context, ownerID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getJobCount, ownerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getJobsByOwner = `-- name: GetJobsByOwner :many
SELECT id, owner_id, image_uri, env_vars, delay_tolerance_hours, created_at, updated_at FROM jobs 
WHERE owner_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetJobsByOwner(ctx context.Context, ownerID uuid.UUID) ([]Job, error) {
	rows, err := q.db.Query(ctx, getJobsByOwner, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Job{}
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.ImageUri,
			&i.EnvVars,
			&i.DelayToleranceHours,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJobsByOwnerWithLimit = `-- name: GetJobsByOwnerWithLimit :many
SELECT id, owner_id, image_uri, env_vars, delay_tolerance_hours, created_at, updated_at FROM jobs 
WHERE owner_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetJobsByOwnerWithLimitParams struct {
	OwnerID uuid.UUID `json:"owner_id"`
	Limit   int32     `json:"limit"`
	Offset  int32     `json:"offset"`
}

func (q *Queries) GetJobsByOwnerWithLimit(ctx context.Context, arg GetJobsByOwnerWithLimitParams) ([]Job, error) {
	rows, err := q.db.Query(ctx, getJobsByOwnerWithLimit, arg.OwnerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Job{}
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.ImageUri,
			&i.EnvVars,
			&i.DelayToleranceHours,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentJobs = `-- name: GetRecentJobs :many
SELECT id, owner_id, image_uri, env_vars, delay_tolerance_hours, created_at, updated_at FROM jobs 
WHERE owner_id = $1 
    AND created_at >= $2
ORDER BY created_at DESC
`

type GetRecentJobsParams struct {
	OwnerID   uuid.UUID `json:"owner_id"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetRecentJobs(ctx context.Context, arg GetRecentJobsParams) ([]Job, error) {
	rows, err := q.db.Query(ctx, getRecentJobs, arg.OwnerID, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Job{}
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.ImageUri,
			&i.EnvVars,
			&i.DelayToleranceHours,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJob = `-- name: UpdateJob :one
UPDATE jobs 
SET 
    image_uri = $3,
    env_vars = $4,
    delay_tolerance_hours = $5,
    updated_at = now()
WHERE id = $1 AND owner_id = $2
RETURNING id, owner_id, image_uri, env_vars, delay_tolerance_hours, created_at, updated_at
`

type UpdateJobParams struct {
	ID                  uuid.UUID `json:"id"`
	OwnerID             uuid.UUID `json:"owner_id"`
	ImageUri            string    `json:"image_uri"`
	EnvVars             []byte    `json:"env_vars"`
	DelayToleranceHours int32     `json:"delay_tolerance_hours"`
}

func (q *Queries) UpdateJob(ctx context.Context, arg UpdateJobParams) (Job, error) {
	row := q.db.QueryRow(ctx, updateJob,
		arg.ID,
		arg.OwnerID,
		arg.ImageUri,
		arg.EnvVars,
		arg.DelayToleranceHours,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ImageUri,
		&i.EnvVars,
		&i.DelayToleranceHours,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
